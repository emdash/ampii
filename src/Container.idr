module Container

import JSON.Derive
import Barcode
import Date
import DirDB
import Food
import Measures

%default total
%language ElabReflection


||| The type of container IDs.
|||
||| For now these are just arbitrary string keys.
public export
0 Id : Type
Id = String


||| How long a given food item is expected to last.
|||
||| This is meant to capture the different representations of product
||| life which are used on packaged and unpackaged foods. From this we
||| can calculate when action must be taken for a given food, and
||| prompt the user to take appropriate actions.
public export
data LifeTime
  = BestBy        Date
  | UseBy         Date
  | UseOrFreezeBy Date
  | Expires       Date
  | Forever
  | Unknown
%runElab derive "LifeTime" [Show,Eq,FromJSON,ToJSON]

||| Conservatively report the expiry date of a container
public export
expiryDate : LifeTime -> Maybe Date
expiryDate (BestBy x)        = Just $ x
expiryDate (UseBy x)         = Just $ x
expiryDate (UseOrFreezeBy x) = Just $ x
expiryDate (Expires x)       = Just $ x
expiryDate Forever           = Nothing
expiryDate Unknown           = Nothing


||| True if the container expires on or after the given date
public export
expiresOn : Date -> LifeTime -> Bool
expiresOn date lt = case expiryDate lt of
  Nothing => False
  Just e  => date <= e


||| The type of container.
public export
data ContainerType
  = WholeFood
  | Sealed
  | Opened
  | Reusable
%runElab derive "ContainerType" [Show,Eq,FromJSON,ToJSON]

||| A single container of a given food.
|||
||| Each container has a unique numeric ID. The ID is arbitrarily
||| chosen by the user.
|||
||| IDs may be generated by the user interface, scanned from
||| pre-printed labels, or hand-chosen by the user.
|||
||| For each container, we track its lifetime, empty weight, and
||| current weight.
public export
record Container where
  constructor MkContainer
  food:    Barcode
  life:    LifeTime
  type:    ContainerType
  empty:   Weight
  current: Weight
%runElab derive "Container" [Show,Eq,FromJSON,ToJSON]
